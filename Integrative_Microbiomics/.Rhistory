runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
NULL + 1
NULL + 1
NULL + 2
runApp()
rand(2)
rnorm(1)
rnorm(1)
rnorm(1*100)
rnorm(1)*100
round(rnorm(1)*100)
round(rnorm(1)*10)
round(rnorm(1)*10)
round(rnorm(1)*10)
round(rnorm(1)*10)
round(rnorm(1)*10)
abs(round(rnorm(1)*10))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
NULL + 0
NULL + 40
NULL + 1
runApp()
runApp()
runApp()
runApp()
1/10
runApp()
runApp()
runApp()
runApp()
runApp()
#=================Trail data====================
#data<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
#=====Function for plotting individual biomes===================
biome_plot<-function(data,k){
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
#bplot(sim,labels)
m<-bplot(sim,labels)
return(heatmap(as.matrix(m),diss,Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = ""))
}
data<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
#Functions to source into the app
library(SNFtool)
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
estimateNumberOfClustersGivenGraph(sim)
as.data.frame(estimateNumberOfClustersGivenGraph(sim))
?as.data.frame
as.data.frame(estimateNumberOfClustersGivenGraph(sim),(2,2))
as.data.frame(estimateNumberOfClustersGivenGraph(sim))
x=as.data.frame(estimateNumberOfClustersGivenGraph(sim))
dim(x)=c(2,2)
x
x=as.data.frame(estimateNumberOfClustersGivenGraph(sim))
x
dim(x)
dim(x)=[2,2]
dim(x)=c(2,2)
x
x=as.data.frame(estimateNumberOfClustersGivenGraph(sim))
t(x)
x=as.data.frame(estimateNumberOfClustersGivenGraph(sim),row.names = "Optimal Clusters")
x
t(x)
runApp()
x=as.data.frame(estimateNumberOfClustersGivenGraph(sim),row.names = "Optimal Clusters")
x
x
x[1,2]
x[,1:2]
cbind(x[,1:2],x[,3:4])
rbind(x[,1:2],x[,3:4])
(x[,1:2],x[,3:4])
x[,1:2]
x=estimateNumberOfClustersGivenGraph(sim)
x
estimateNumberOfClustersGivenGraph(sim)
estimateNumberOfClustersGivenGraph(sim)
estimateNumberOfClustersGivenGraph(sim)
estimateNumberOfClustersGivenGraph(sim)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(biome_plot)
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dim(data)[2]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library("vegan")
data<-read.csv("./../Data/Version2/Virome_cleaned.csv",header = TRUE,row.names = 1)
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
dsim
sim=(as.matrix(dsim)-1)*-1
sim
k=2
labels=spectralClustering(sim,k)
library(SNFtool)
labels=spectralClustering(sim,k)
sim=(as.matrix(dsim)-1)*-1
labels=spectralClustering(sim,k)
sim
sim
NaN
sim
sim==NaN
sim
isnan(sim)
is.nan(sim)
sim[is.nan(sim)]
sim[is.nan(sim)]=0
sim
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
dsim
dsim[1,]
dsim[1,:]
dsim[1]
dsim
dsim[1,1]
dsim[12]
class(dsim)
as.matrix(dsim)[1,]
dsim[is.nan(dsim)]
dsim[is.nan(dsim)]=0
sim=(as.matrix(dsim)-1)*-1
sim
k
labels=spectralClustering(sim,k)
sim
sim
labels=spectralClustering(sim,k)
eigen(sim)
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
sim[is.nan(sim)]=1
labels=spectralClustering(sim,k)
sim
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
#=================Trail data====================
data<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data
len(data)
length(data)
runApp()
runApp()
runApp()
1:3
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virome.csv",header = TRUE,row.names = 1)
x<-list(data1,data2,data3)
#x<-list(data1,data2,data3)
for (i in 1:3){
incProgress(1/3, detail = paste("Merging", i))
if (is.null(x[[i]])==FALSE){
dsim=vegdist(x[[i]],method='bray',diag=TRUE,upper=TRUE)
x[[i]]=(as.matrix(dsim)-1)*-1
}
}
#x<-list(data1,data2,data3)
for (i in 1:3){
#incProgress(1/3, detail = paste("Merging", i))
if (is.null(x[[i]])==FALSE){
dsim=vegdist(x[[i]],method='bray',diag=TRUE,upper=TRUE)
x[[i]]=(as.matrix(dsim)-1)*-1
}
}
x
x<-x[-which(sapply(x, is.null))]
W = SNF(x,k,t)
x
x
x
x<-list(data1,data2,data3)
for (i in 1:3){
#incProgress(1/3, detail = paste("Merging", i))
if (is.null(x[[i]])==FALSE){
dsim=vegdist(x[[i]],method='bray',diag=TRUE,upper=TRUE)
x[[i]]=(as.matrix(dsim)-1)*-1
}
}
x
sapply(x,is.null)
which(sapply(x,is.null))
[-which(sapply(x,is.null))]
x
x[-0]
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virome.csv",header = TRUE,row.names = 1)
x<-list(data1,data2,data3)
for (i in 1:3){
#incProgress(1/3, detail = paste("Merging", i))
if (is.null(x[[i]])==FALSE){
dsim=vegdist(x[[i]],method='bray',diag=TRUE,upper=TRUE)
x[[i]]=(as.matrix(dsim)-1)*-1
}
}
#Functions to source into the app
library(SNFtool)
library("vegan")
library("reticulate")
use_python("/usr/local/bin/python")
source_python("Python_codes/plot_mat.py")
source_python("Python_codes/sil.py")
for (i in 1:3){
#incProgress(1/3, detail = paste("Merging", i))
if (is.null(x[[i]])==FALSE){
dsim=vegdist(x[[i]],method='bray',diag=TRUE,upper=TRUE)
x[[i]]=(as.matrix(dsim)-1)*-1
}
}
if (sum(sapply(x,is.null))>0){
x<-x[-which(sapply(x, is.null))]
}  #Problem when there are 3 datasets
W = SNF(x,k,t)
x
x[1]
x[2]
x[3]
W = SNF(x,k,t)
W = SNF(x,20,20)
dim(x[[1]])
dim(x[[2]])
dim(x[[3]])
data3
shiny::runApp()
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virome.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virus.csv",header = TRUE,row.names = 1)
x<-list(data1,data2,data3)
for (i in 1:3){
#incProgress(1/3, detail = paste("Merging", i))
if (is.null(x[[i]])==FALSE){
dsim=vegdist(x[[i]],method='bray',diag=TRUE,upper=TRUE)
x[[i]]=(as.matrix(dsim)-1)*-1
}
}
if (sum(sapply(x,is.null))>0){
x<-x[-which(sapply(x, is.null))]
}
W = SNF(x,k,t)
W = SNF(x,20,20)
W
x
x[[1]]
x[[2]]
x[[3]]
#=================Trail data====================
#data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
#data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
#data3<-read.csv("./../Data/virus.csv",header = TRUE,row.names = 1)
#=====Function for plotting individual biomes===================
biome_plot<-function(data,k){
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
sim[is.nan(sim)]=1
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
#bplot(sim,labels)
m<-bplot(sim,labels)
return(heatmap(as.matrix(m),diss,Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = ""))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sim
runApp()
runApp()
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virus.csv",header = TRUE,row.names = 1)
dim(data1)==dim(data2)==dim(data3)
dim(data1)==dim(data2)
dim(data1)
dim(data2)
length(data1)
dim(data1)[1]==dim(data2)[1]==dim(data3)[1]
dim(data1)[1]==dim(data2)[1]
dim(data1)[1]==dim(data2)[1] & dim(data2)[1]==dim(data3)[1]
shiny::runApp()
runApp()
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virus.csv",header = TRUE,row.names = 1)
row.names(data1)
row.names(data1)==row.names(data2)
row.names(data1)==row.names(data2)==row.names(data3)
row.names(data1)==row.names(data2)
sum(row.names(data1)==row.names(data2))
row.names(data1)==row.names(data2) & row.names(data2) == row.names(data3)
all(row.names(data1)==row.names(data2) & row.names(data2) == row.names(data3))
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyWidgets")
??shinyWidgets
runApp()
?setBackgroundImage
runApp()
shiny::runGitHub(repo="shinyAppTutorials",username="davidruvolo51",subdir="shiny_landing_page")
runApp()
runApp()
runApp()
runApp()
runApp()
#=====Function for plotting individual biomes===================
biome_plot<-function(data,k){
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
sim[is.nan(sim)]=1
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
#bplot(sim,labels)
m<-bplot(sim,labels)
return(heatmap(as.matrix(m),diss,Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = ""))
}
runApp()
runApp()
runApp()
runApp()
runApp()
?tag
runApp()
runApp()
?h1
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
