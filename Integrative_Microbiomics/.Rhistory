return(W)
}
#=============Label Creating Function=======================
label_create<-function(sim,k){
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(sim))
}
runApp()
#Functions to source into the app
library(SNFtool)
library("vegan")
library("reticulate")
use_python("/usr/local/bin/python")
source_python("Python_codes/plot_mat.py")
source_python("Python_codes/sil.py")
#=================Trail data====================
#data<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
#=====Function for plotting individual biomes===================
biome_plot<-function(data,k){
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
#bplot(sim,labels)
m<-bplot(sim,labels)
#return(heatmap(as.matrix(m),diss,Rowv = NA, Colv = NA, scale = "none",
#main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = NULL,labCol = NULL))
}
#===========Function for giving k based on maximum silhoutee score============
#Given Similarity matrix and labels
max_k<-function(sim){
k_sil=list()
for (i in 2:10){
labels=spectralClustering(sim,i)
labels=as.data.frame(labels,row.names = row.names(sim))
k_sil[[i]]<-silhouette_score(sim,labels)}
k_sil=data.frame(number_of_clusters=2:10,unlist(k_sil))
colnames(k_sil)<-c("Number of Clusters","Silhouette Score")
return(k_sil)
}
#=================Merging Function==================================
merge_snf<-function(x,k,t){
#x<-list(data1,data2,data3)
for (i in 1:3){
if (is.null(x[[i]])==FALSE){
dsim=vegdist(x[[i]],method='bray',diag=TRUE,upper=TRUE)
x[[i]]=(as.matrix(dsim)-1)*-1
}
}
x<-x[-which(sapply(x, is.null))]
W = SNF(x,k,t)
#print(W)
return(W)
}
#=============Label Creating Function=======================
label_create<-function(sim,k){
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(sim))
}
runApp()
runApp()
runApp()
data<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
k=2
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
#bplot(sim,labels)
m<-bplot(sim,labels)
m
library(ggplot)
library("ggplot")
library("gplot")
library("gplots")
?heat,heatmap.2
?heatmap.2
heatmap.2(m)
heatmap.2(as.matrix(m))
heatmap.2(as.matrix(m),Rowv = NULL)
heatmap.2(as.matrix(m),Rowv = NULL,Colv = NULL)
heatmap.2(as.matrix(m),Rowv = NULL,Colv = NULL,distfun = NULL)
heatmap.2(as.matrix(m),Rowv = NULL,Colv = NULL,distfun = NULL,scale=FALSE)
heatmap.2(as.matrix(m),Rowv = NULL,Colv = NULL,distfun = NULL,scale=NULL)
m
rownames(m)
rownames(m)<-NULL
colnames(m)<-NULL
return(heatmap(as.matrix(m),diss,Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = NULL,labCol = NULL))
m
return(heatmap(as.matrix(m),diss,Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "none",labCol = "none"))
return(heatmap(as.matrix(m),diss,Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = ""))
data
plot(data)
colSums(data)
plot(colSums(data))
barplot2(colSums(data))
barplot2(colSums(data)[10])
barplot2(colSums(data)[1:10])
barplot2(colSums(data)[1:10])
barplot2(colSums(data)[1:50])
summ<-colSums(data)
summ
order(summ)
summ[,order(summ)]
summ[order(summ),]
summ
?colSums
?colSums
summ
colnames(summ)
type(summ)
data
class(summ)
?sort
sort(summ)
sort(summ,decreasing = TRUE)
summ<-sort(summ,decreasing = TRUE)
sort(summ,decreasing = TRUE)
barplot(summ)
barplot2(summ)
barplot(summ)
#============Function for barplot=====================
bar<-function(data,k){
summ<-colSums(data)
summ<-sort(summ,decreasing = TRUE)
barplot(summ[1:k])
}
bar(data,2)
bar(data,10)
?barplot
barplot(summ[1:k])
barplot(summ[1:10])
barplot(summ[1:10],horiz = TRUE)
?barplot
barplot(summ[1:10],las=TRUE)
barplot2(summ[1:10],las=TRUE)
barplot(summ[1:10],las=TRUE)
?barplot
barplot(summ[1:10],las=2)
barplot(summ[1:10],las=2,horiz = TRUE)
barplot(summ[1:10],las=2)
barplot2(summ[1:10],las=2)
barplot2(summ[1:10],las=2,axes=FALSE, col="darkblue")
barplot(summ[1:k],las=2,axes=FALSE, col="darkblue",horiz = TRUE)
barplot2(summ[1:10],las=2,axes=FALSE, col="darkblue",horiz=TRUE)
summ<-sort(summ,decreasing = FALSE)
barplot2(summ[1:10],las=2,axes=FALSE, col="darkblue",horiz=TRUE)
par(mar=c(5,6,4,1)+.1)
barplot2(summ[1:10],las=2,axes=FALSE, col="darkblue",horiz=TRUE)
par(mar=c(5,8,4,1)+.1)
barplot2(summ[1:10],las=2,axes=FALSE, col="darkblue",horiz=TRUE)
barplot(summ[1:10],las=2,axes=FALSE, col="darkblue",horiz=TRUE)
summ
#============Function for barplot=====================
bar<-function(data,k){
summ<-colSums(data)
summ<-sort(summ,decreasing = FALSE)
par(mar=c(5,8,4,1)+.1)
barplot(summ[1:k],las=2,axes=FALSE, col="darkblue",horiz = TRUE)
}
bar(data,10)
bar(data,12)
bar(data,20)
summ
summ<-sort(summ,decreasing = TRUE)
par(mar=c(5,8,4,1)+.1)
barplot(summ[1:k],las=2,axes=FALSE, col="darkblue",horiz = TRUE)
#============Function for barplot=====================
bar<-function(data,k){
summ<-colSums(data)
summ<-sort(summ,decreasing = TRUE)
par(mar=c(5,8,4,1)+.1)
barplot(summ[1:k],las=2,axes=FALSE, col="darkblue",horiz = TRUE)
}
bar(data,20)
?barplot
#============Function for barplot=====================
bar<-function(data,k){
summ<-colSums(data)
summ<-sort(summ,decreasing = TRUE)
par(mar=c(5,10,4,1)+.1)
barplot(sort(summ[1:k]),las=2,axes=FALSE, col="darkblue",horiz = TRUE)
}
bar(data,20)
runApp()
#============Function for barplot=====================
bar<-function(data,k){
summ<-colSums(data)
summ<-sort(summ,decreasing = TRUE)
par(mar=c(1,10,4,1)+.1)
barplot(sort(summ[1:k]),las=2,axes=FALSE, col="darkblue",horiz = TRUE)
}
bar(data,20)
runApp()
runApp()
runApp()
?barplot
barplot(sort(summ[1:k]),las=2,axes=FALSE, col="darkblue",horiz = TRUE,title("Top 10 Species based on overall Abundance"))
#============Function for barplot=====================
bar<-function(data,k){
summ<-colSums(data)
summ<-sort(summ,decreasing = TRUE)
par(mar=c(1,10,1,1)+.1)
title("Top 10 Species based on overall Abundance")
barplot(sort(summ[1:k]),las=2,axes=FALSE, col="darkblue",horiz = TRUE)
}
runApp()
paste("Top","n","variables based on dataset")
runApp()
runApp()
par(mar=c(1,5,1,1)+.1)
runApp()
runApp()
runApp()
runApp()
runApp()
?column
runApp()
runApp()
runApp()
runApp()
?br
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
NULL + 1
NULL + 1
NULL + 2
runApp()
rand(2)
rnorm(1)
rnorm(1)
rnorm(1*100)
rnorm(1)*100
round(rnorm(1)*100)
round(rnorm(1)*10)
round(rnorm(1)*10)
round(rnorm(1)*10)
round(rnorm(1)*10)
round(rnorm(1)*10)
abs(round(rnorm(1)*10))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
NULL + 0
NULL + 40
NULL + 1
runApp()
runApp()
runApp()
runApp()
1/10
runApp()
runApp()
runApp()
runApp()
runApp()
#=================Trail data====================
#data<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
#=====Function for plotting individual biomes===================
biome_plot<-function(data,k){
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
#bplot(sim,labels)
m<-bplot(sim,labels)
return(heatmap(as.matrix(m),diss,Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = ""))
}
data<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
#Functions to source into the app
library(SNFtool)
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
estimateNumberOfClustersGivenGraph(sim)
as.data.frame(estimateNumberOfClustersGivenGraph(sim))
?as.data.frame
as.data.frame(estimateNumberOfClustersGivenGraph(sim),(2,2))
as.data.frame(estimateNumberOfClustersGivenGraph(sim))
x=as.data.frame(estimateNumberOfClustersGivenGraph(sim))
dim(x)=c(2,2)
x
x=as.data.frame(estimateNumberOfClustersGivenGraph(sim))
x
dim(x)
dim(x)=[2,2]
dim(x)=c(2,2)
x
x=as.data.frame(estimateNumberOfClustersGivenGraph(sim))
t(x)
x=as.data.frame(estimateNumberOfClustersGivenGraph(sim),row.names = "Optimal Clusters")
x
t(x)
runApp()
x=as.data.frame(estimateNumberOfClustersGivenGraph(sim),row.names = "Optimal Clusters")
x
x
x[1,2]
x[,1:2]
cbind(x[,1:2],x[,3:4])
rbind(x[,1:2],x[,3:4])
(x[,1:2],x[,3:4])
x[,1:2]
x=estimateNumberOfClustersGivenGraph(sim)
x
estimateNumberOfClustersGivenGraph(sim)
estimateNumberOfClustersGivenGraph(sim)
estimateNumberOfClustersGivenGraph(sim)
estimateNumberOfClustersGivenGraph(sim)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(biome_plot)
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dim(data)[2]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library("vegan")
data<-read.csv("./../Data/Version2/Virome_cleaned.csv",header = TRUE,row.names = 1)
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
dsim
sim=(as.matrix(dsim)-1)*-1
sim
k=2
labels=spectralClustering(sim,k)
library(SNFtool)
labels=spectralClustering(sim,k)
sim=(as.matrix(dsim)-1)*-1
labels=spectralClustering(sim,k)
sim
sim
NaN
sim
sim==NaN
sim
isnan(sim)
is.nan(sim)
sim[is.nan(sim)]
sim[is.nan(sim)]=0
sim
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
dsim
dsim[1,]
dsim[1,:]
dsim[1]
dsim
dsim[1,1]
dsim[12]
class(dsim)
as.matrix(dsim)[1,]
dsim[is.nan(dsim)]
dsim[is.nan(dsim)]=0
sim=(as.matrix(dsim)-1)*-1
sim
k
labels=spectralClustering(sim,k)
sim
sim
labels=spectralClustering(sim,k)
eigen(sim)
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
sim[is.nan(sim)]=1
labels=spectralClustering(sim,k)
sim
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
