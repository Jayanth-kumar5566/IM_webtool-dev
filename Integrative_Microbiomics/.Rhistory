return(heatmap(as.matrix(m),diss,Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = ""))
}
runApp()
runApp()
runApp()
runApp()
runApp()
?tag
runApp()
runApp()
?h1
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#=====Function for plotting log of individual biomes===================
biome_log_plot<-function(data,k){
dsim=vegdist(data,method='bray',diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
sim[is.nan(sim)]=1
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
#bplot(sim,labels)
sim<-log(sim)
m<-bplot(sim,labels)
return(heatmap(as.matrix(m),diss,Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = ""))
}
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
paste("asdfasf",3)
paste("asdfasf",3,sep='')
runApp()
runApp()
?lapply
runApp()
lapply(1:3, sum)
runApp()
runApp()
?switch
lst=list(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1())[1]/10)),
numericInput("t_iter","Number of Iterations",value=20))
runApp()
runApp()
data1
weight_ui(data1,data2,data3)
data_extra=list(data1,data2)
weight_ui(data1,data2,data3,data_extra)
lst=list(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("t_iter","Number of Iterations",value=20)))
lst=list(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("t_iter","Number of Iterations",value=20)))
lst
tagList(
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1())[1]/10)),
numericInput("t_iter","Number of Iterations",value=20),
numericInput("weight1","Weight of the Biome 1",value=length(data1())),
numericInput("weight2","Weight of the Biome 2",value=length(data2())),
numericInput("weight3","Weight of the Biome 3",value=length(data3()))
)
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)))
)
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)))
runApp()
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)))
numericInput("t_iter","Number of Iterations",value=20),
numericInput("t_iter","Number of Iterations",value=20)
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)))
numericInput("t_iter","Number of Iterations",value=20)
tagList(
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)))
numericInput("t_iter","Number of Iterations",value=20)
)
tagList(
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10))),
numericInput("t_iter","Number of Iterations",value=20)
)
tagList(
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10))),
taglist(numericInput("t_iter","Number of Iterations",value=20))
)
tagList(
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10))),
tagList(numericInput("t_iter","Number of Iterations",value=20))
)
tagAppendChild()
?tagAppendChild()
runApp()
weight_ui(data1,data2,data3,data_extra)
weight_ui<-function(data1,data2,data3,data_extra){
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("t_iter","Number of Iterations",value=20)))
for (i in 1:length(data_extra)+3){
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=0))
return(lst)
}
}
weight_ui(data1,data2,data3,data_extra)
tagList(
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10))),
tagList(numericInput("t_iter","Number of Iterations",value=20))
)
x<-tagList(
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10))),
tagList(numericInput("t_iter","Number of Iterations",value=20))
)
x<-tagAppendChild(x,tagList(numericInput("t_iter","Number of Iterations",value=20))
)
x
length(data_extra)
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("t_iter","Number of Iterations",value=20)))
lst
for (i in 1:length(data_extra)+3){
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=0))
return(lst)
}
lst
weight_ui<-function(data1,data2,data3,data_extra){
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("t_iter","Number of Iterations",value=20)))
for (i in 1:length(data_extra)+3){
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=0))
}
return(lst)
}
weight_ui(data1,data2,data3,data_extra)
runApp()
1:3
#==================Multiple weight UI =====================
weight_ui<-function(data1,data2,data3,data_extra){
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("t_iter","Number of Iterations",value=20)))
for (i in 1:length(data_extra)+3){
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=0))
}
return(lst)
}
runApp()
#==================Multiple weight UI =====================
weight_ui<-function(data1,data2,data3,data_extra){
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("t_iter","Number of Iterations",value=20)))
for (i in 1:length(data_extra)+3){
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=0))
}
return(lst)
}
runApp()
x<-tagList(
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10))),
tagList(numericInput("t_iter","Number of Iterations",value=20))
)
x
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("t_iter","Number of Iterations",value=20)))
lst
x<-tagList(
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10))),
numericInput("t_iter","Number of Iterations",value=20))
x
x<-tagList(
numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10))),
numericInput("t_iter","Number of Iterations",value=20))
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("t_iter","Number of Iterations",value=20)))
lst
x
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1)[1]/10)),
numericInput("t_iter","Number of Iterations",value=20))
lst
for (i in 1:length(data_extra)+3){
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=0))
}
lst
runApp()
lst
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1]/10)),
numericInput("t_iter","Number of Iterations",value=20)))
lst
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1])/10)),
numericInput("t_iter","Number of Iterations",value=20))
lst
for (i in 1:length(data_extra)+3){
print(i)
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=0))
}
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1])/10)),
numericInput("t_iter","Number of Iterations",value=20))
for (i in 1:(length(data_extra)+3)){
print(i)
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=0))
}
lst
runApp()
runApp()
x<-list(data1,data2)
length(x)
runApp()
runApp()
shiny::runApp()
data1
data_extra
length(data_extra)
length(data1)
length(data2)
length(data3)
lapply(data_extra,length)
unlist(lapply(data_extra,length))
sum(unlist(lapply(data_extra,length)))
sum(length(data1),unlist(lapply(data_extra,length)))
sum(length(data1),length(data2),length(data3),unlist(lapply(data_extra,length)))
sum(1,1,1,unlist(lapply(data_extra,length)))
x<-c(1,2,4)
x[1]
x[2]
x[3]
x[4]
unlist(lapply(data_extra,length)
)
lapply(data_extra,length)
z<-lapply(data_extra,length)
z
z[2,1]
z[[2,1]]
names(z)
z[[1]]
z[[2]]
z[c(2,1)]
rev(z)
z
rev(z)
rev(data_extra)
z<-rev(data_extra)
lapply(z,length)
lapply(data_extra,length)
sum(lapply(data_extra,length))
runApp()
weight_ui(data1,data2,data3,data_extra)
data_extra<-rev(data_extra)
data_extra[[length(data_extra)+1]]<-data1
data_extra[[length(data_extra)+2]]<-data2
data_extra[[length(data_extra)+3]]<-data3
data_extra<-rev(data_extra)
tot=sum(unlist(lapply(data_extra,length)))
tot
((length(data_extra[[i]])/tot)*100)
(length(data_extra[[i]])/tot)*100
(length(data_extra[[i]])/tot)
length(data_extra[[i]])/tot
length(data_extra[[i]])
data_extra
data_extra[[1]]
lengthdata_extra[[1]]
length(data_extra[[1]])
(length(data_extra[[1]]))/tot
((length(data_extra[[1]]))/tot)*100
i
runApp()
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virus.csv",header = TRUE,row.names = 1)
data_extra<-list(data1,data2)
data_extra<-rev(data_extra)
data_extra[[length(data_extra)+1]]<-data1
data_extra[[length(data_extra)+2]]<-data2
data_extra[[length(data_extra)+3]]<-data3
data_extra<-rev(data_extra)
lapply(data_extra,length)
length(data_extra)
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virus.csv",header = TRUE,row.names = 1)
data_extra<-list(data1,data2)
length(data_extra)
lapply(data_extra,length)
data_extra<-rev(data_extra)
lapply(data_extra,length)
data_extra[[length(data_extra)+1]]<-data1
data_extra[[length(data_extra)+2]]<-data2
data_extra[[length(data_extra)+3]]<-data3
lapply(data_extra,length)
length(data1)
length(data2)
runApp()
for (i in 1:length(data_extra)){
#print(length(data_extra))
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=((length(data_extra[[i]])/tot)*100)
))
}
#==================Multiple weight UI =====================
weight_ui<-function(data1,data2,data3,data_extra){
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1])/10)),
numericInput("t_iter","Number of Iterations",value=20))
data_extra<-rev(data_extra)
data_extra[[length(data_extra)+1]]<-data1
data_extra[[length(data_extra)+1]]<-data2
data_extra[[length(data_extra)+1]]<-data3
data_extra<-rev(data_extra)
tot=sum(unlist(lapply(data_extra,length)))
for (i in 1:length(data_extra)){
#print(length(data_extra))
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=((length(data_extra[[i]])/tot)*100)
))
}
return(lst)
}
lapply(data_extra,length)
data_extra<-rev(data_extra)
data_extra[[length(data_extra)+1]]<-data1
data_extra[[length(data_extra)+1]]<-data2
data_extra[[length(data_extra)+1]]<-data3
data_extra<-rev(data_extra)
lapply(data_extra,length)
data_extra[[length(data_extra)+1]]<-data1
lapply(data_extra,length)
#==================Multiple weight UI =====================
weight_ui<-function(data1,data2,data3,data_extra){
lst=tagList(numericInput("K_nn","K Neareast Neighbours",value = round(dim(data1[1])/10)),
numericInput("t_iter","Number of Iterations",value=20))
data_extra<-rev(data_extra)
data_extra[[length(data_extra)+1]]<-data3
data_extra[[length(data_extra)+1]]<-data2
data_extra[[length(data_extra)+1]]<-data1
data_extra<-rev(data_extra)
tot=sum(unlist(lapply(data_extra,length)))
for (i in 1:length(data_extra)){
#print(length(data_extra))
lst<-tagAppendChild(lst,numericInput(paste("weight",i),paste("Weight of the Biome", i),value=((length(data_extra[[i]])/tot)*100)
))
}
return(lst)
}
lapply(data_extra,length)
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virus.csv",header = TRUE,row.names = 1)
data_extra<-list(data1,data2)
lapply(data_extra,length)
data_extra<-rev(data_extra)
data_extra[[length(data_extra)+1]]<-data3
data_extra[[length(data_extra)+1]]<-data2
data_extra[[length(data_extra)+1]]<-data1
data_extra<-rev(data_extra)
lapply(data_extra,length)
runApp()
runApp()
?round
round(100.1231,1)
round(100.1231,2)
tot
lapply(1:5,paste("weight",i))
lapply(1:5,function(i) {paste("weight",i)})
lapply(1:5,function(i) {paste0("weight",i)})
unlist(lapply(1:5,function(i) {paste0("weight",i)}))
c(unlist(lapply(1:5,function(i) {paste0("weight",i)})))
type(unlist(lapply(1:5,function(i) {paste0("weight",i)})))
class(unlist(lapply(1:5,function(i) {paste0("weight",i)})))
unlist(lapply(1:5,function(i) {paste0("weight",i)}))
unlist(lapply(1:5,function(i) {input[[paste0("weight",i)]]}))
runApp()
runApp()
weight=c(10,45,45)
weight=weight/sum(weight)
weight
weight*3
sum(weight*3)
weight*tot
data_extra<-rev(data_extra)
data_extra[[length(data_extra)+1]]<-data3
data_extra[[length(data_extra)+1]]<-data2
data_extra[[length(data_extra)+1]]<-data1
data_extra<-rev(data_extra)
tot=sum(unlist(lapply(data_extra,length)))
weight*tot
weight=weight*tot
weight=weight/sum(weight)
weight*3
shiny::runApp()
shiny::runApp()
shiny::runApp()
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virus.csv",header = TRUE,row.names = 1)
data=data1
dsim=vegdist(data,method=metric,diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
sim[is.nan(sim)]=1
metric="bray"
dsim=vegdist(data,method=metric,diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
sim[is.nan(sim)]=1
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
k=2
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
sim
system("python Python_codes/plot_mat.py")
bplot(sim,labels)
runApp()
runApp()
runApp()
runApp()
diverge_hsv
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virus.csv",header = TRUE,row.names = 1)
data
dsim=vegdist(data,method=metric,diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
sim[is.nan(sim)]=1
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
#bplot(sim,labels)
m<-bplot(sim,labels)
heatmap(as.matrix(m),Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = "",col="Blue")
heatmap(as.matrix(m),Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = "",col="diverge_hsv")
heatmap(as.matrix(m),Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = "",col="blue2red")
heatmap(as.matrix(m),Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = "",col="Blues")
heatmap(as.matrix(m),Rowv = NA, Colv = NA, scale = "none",
main = "Spectral clustering",xlab = "Sample ID",ylab = "Sample ID",labRow = "",labCol = "",col=pal)
pal<-colorRampPalette("Blues")
pal<-colorRampPalette("Blues"{20})
pal<-colorRampPalette("Blues",{200})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data=data1
k=2
metric="bray"
dsim=vegdist(data,method=metric,diag=TRUE,upper=TRUE)
sim=(as.matrix(dsim)-1)*-1
sim[is.nan(sim)]=1
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(sim))
labels
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
m<-bplot(sim,labels)
m
#=============Integrated Matrix Creating Function=======================
matrix_create<-function(sim,k){
labels=spectralClustering(sim,k)
labels=as.data.frame(labels,row.names = row.names(data))
sim=as.data.frame(sim)
m<-bplot(sim,labels)
return(m)
}
matrix_create(sim,2)
sim
sim
matrix_create(sim,2)
label_create(sim,2)
#=================Trail data====================
data1<-read.csv("./../Data/bacteria.csv",header = TRUE,row.names = 1)
data2<-read.csv("./../Data/fungi.csv",header = TRUE,row.names = 1)
data3<-read.csv("./../Data/virus.csv",header = TRUE,row.names = 1)
sim<-merge_snf(data1,data2,data3,c(),2,20,"bray")
if (is.null(x[[i]])==FALSE){
dsim=vegdist(x[[i]],method=metric,diag=TRUE,upper=TRUE)
dsim[is.nan(dsim)]<-0
x[[i]]=(as.matrix(dsim)-1)*-1
}
W = SNF(list(data1,data2,data3),k,t)
data1
data2
runApp()
runApp()
runApp()
runApp()
